#include <stdio.h>
#include <stdlib.h>

// Структура узла дерева
struct Node {
    int key;
    struct Node *left, *right;
};

// Функция для создания нового узла
struct Node *newNode(int item) {
    struct Node *temp = (struct Node *)malloc(sizeof(struct Node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

// Вставка нового узла
struct Node *insert(struct Node *node, int key) {
    // Если дерево пустое, возвращаем новый узел
    if (node == NULL) return newNode(key);

    // Иначе рекурсивно спускаемся в дерево
    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);

    return node;
}

// Функция для вывода дерева в порядке восхождения (in-order)
void inorder(struct Node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d \n", root->key);
        inorder(root->right);
    }
}

int main() {
    struct Node *root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    printf("Дерево в порядке восхождения (in-order): \n");
    inorder(root);

    return 0;
}
